---
import { getFormattedDate } from "@/utils/date";
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"time"> & {
    date: Date | Array<Date> | undefined;
    dateTimeOptions?: Intl.DateTimeFormatOptions;
};

const { date, dateTimeOptions, ...attrs } = Astro.props;


// Handle undefined date
if (!date) {
    return null;
}

export function formatDate(date: Date | Array<Date>, options?: Intl.DateTimeFormatOptions): string {
    options = options || { year: "numeric", month: "long", day: "numeric" };
    const locale = Astro.locale || 'en-UK';

    if (Array.isArray(date)) {
        const startDate = new Date(String(date[0]));
        const endDate = new Date(String(date[1]));

        let startOptions: Intl.DateTimeFormatOptions = { day: "numeric" };
        let endOptions: Intl.DateTimeFormatOptions = { day: "numeric", month: "long", year: "numeric" };

        // If years are different, show year in start date
        if (startDate.getFullYear() !== endDate.getFullYear()) {
            startOptions.year = "numeric";
        }

        // If months are different, show month in start date
        if (startDate.getMonth() !== endDate.getMonth() || startDate.getFullYear() !== endDate.getFullYear()) {
            startOptions.month = "long";
        }

        const startFormatted = startDate.toLocaleDateString(locale, startOptions);
        const endFormatted = endDate.toLocaleDateString(locale, endOptions);

        return `${startFormatted} â€“ ${endFormatted}`;
    }
    
    // Single date - use numeric day (no leading zeros)
    const singleOptions = { ...options, day: "numeric" as const };
    return date.toLocaleDateString(locale, singleOptions);
}

const postDate = formatDate(date, dateTimeOptions);

// For datetime attribute, use ISO format of the first date
const firstDate = Array.isArray(date) ? new Date(String(date[0])) : new Date(String(date));
const datetimeISO = firstDate.toISOString();
---

<time datetime={datetimeISO} title={postDate} {...attrs}>{postDate}</time>