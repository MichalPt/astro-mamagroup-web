---
import type { CollectionEntry } from "astro:content";
import type { HTMLTag, Polymorphic } from "astro/types";
import Image from "astro/components/Image.astro";
import {slugify} from "@/utils/strings.ts";
import { formatDateInterval} from "@/utils/date.ts";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
    event: CollectionEntry<"events">;
};

const { as: Tag = "div", event } = Astro.props;
const image = event.data.image;

// Pass event data to client-side for dynamic processing
const eventData = {
    endDate: Array.isArray(event.data.date) ? event.data.date.reverse()[0] : event.data.date
};
---

<a 
    data-astro-prefetch 
    href={`/events/${slugify(event.data.group)}/${slugify(event.data.name)}/`} 
    class="event-card citrus-link relative flex items-end justify-center h-90 p-4 rounded-lg shadow-lg bg-special-lighter hover:bg-special-lightest hover:brightness-80 text-center"
    data-event-end={eventData.endDate}
>
    <div class="flex flex-col m-4 pw-full sm:shrink justify-center my-auto">
        {event.data.image && 
            <div class="flex grow justify-center items-center">
                <Image src={image} alt={image.split('/').at(-1)} height="150" width="150"/>
            </div>
        }
        <Tag class="citrus-link font-medium text-accent-base leading-5">
                {event.data.name}
        </Tag>
        <div class="text-xs/5 text-lighter">{formatDateInterval(event.data.date)}</div>
    </div>
</a>

<script>
    function updateEventCardStyles() {
        const eventCards = document.querySelectorAll('.event-card[data-event-end]');
        const today = new Date();
        
        eventCards.forEach(card => {
            const endDateStr = card.getAttribute('data-event-end');
            if (!endDateStr) return;
            
            const endDate = new Date(new Date(endDateStr).getTime() + 24*60*60*1000); // Ensure we consider the full day
            const isExpired = endDate < today;
            
            // Remove all possible classes first
            card.classList.remove(
                'bg-special-lighter', 'hover:bg-special-lightest',
                'opacity-45', 'hover:bg-special-lighter', 'text-white'
            );
            
            if (isExpired) {
                // Event has ended - apply expired styling
                card.classList.add('bg-special-lighter', 'opacity-45', 'hover:bg-special-lighter', 'text-white');
            } else {
                // Event is current/future - apply normal styling
                card.classList.add('bg-special-lighter', 'hover:bg-special-lightest');
            }
        });
    }
    
    // Update styles on page load
    document.addEventListener('DOMContentLoaded', updateEventCardStyles);
    document.addEventListener('astro:page-load', updateEventCardStyles);
    
    // Optional: Update styles every hour to catch date changes
    setInterval(updateEventCardStyles, 60 * 60 * 1000);
</script>