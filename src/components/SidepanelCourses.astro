---
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";
import { slugify, processCourseId } from "@/utils/strings.ts";

interface Props {
    collectionName: string;
}

const { collectionName } = Astro.props;
const courses = await getCollection(collectionName, ({ data }) => data.courseVisible == true)

// Custom semester order
const semesterOrder = { winter: 0, summer: 1, both: 2 };
const semesters = ["winter", "summer"];

// Sort courses by semester, then by courseName
// courses = courses.sort((a, b) => {
//     const semA = semesterOrder[(a.data.semester as keyof typeof semesterOrder) ?? "winter"] ?? 0;
//     const semB = semesterOrder[(b.data.semester as keyof typeof semesterOrder) ?? "winter"] ?? 0;
//     if (semA !== semB) return semA - semB;
//     return a.data.courseName.localeCompare(b.data.courseName, undefined, { sensitivity: "base" });
// });

const currentPath = Astro.url.pathname;
const rootPath = currentPath.split('/').slice(0, 3).join('/') + '/';

// Function to check if current path matches
function isCurrentPath(path: string) {
    return currentPath === path || currentPath.startsWith(path + '/');
}

// Function to check if any child path is current
function hasCurrentChild(course: any) {
    const coursePath = `${rootPath}${processCourseId(course.id)}`;
    if (isCurrentPath(coursePath)) return true;
    
    return course.data.content.some((section: any) =>
        section.sectionContent.some((subsection: any) =>
            subsection.subsectionContent.some((video: any) =>
                isCurrentPath(`${rootPath}${processCourseId(course.id)}/${video.title}`)
            )
        )
    );
}
---

<style>
.sidepanel-collapsed {
    @apply w-5 md:w-10 h-12 md:h-16 bg-white dark:bg-[#272727] rounded-r-lg shadow-lg flex items-center justify-center cursor-pointer transition-all duration-300;
    position: fixed;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    z-index: 41;
}
.sidepanel-expanded {
    @apply w-[100vw] md:w-80 md:max-w-80 shadow-[5px_0px_10px_rgba(0,0,0,0.05)];
    position: fixed;
    left: 0;
    top: 0;
    height: 100vh;
    opacity: 0;
    transform: translateX(-40px);
    transition: opacity 300ms, transform 300ms;
    z-index: 42;
    pointer-events: none;
    overflow-y: auto;
    overflow-x: hidden;
    background-attachment: fixed;
    background: linear-gradient(to bottom, #e6f1fe, #e1e6fe); /* Light mode */
}
:global(html[data-theme="dark"]) .sidepanel-expanded {
    background: linear-gradient(to bottom, #2a2e32, #272727); /* Dark mode */
}
.sidepanel-expanded.visible {
    opacity: 1;
    transform: translateX(0);
    pointer-events: auto;
}

.dropdown-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
}
.dropdown-content.expanded {
    max-height: 1000px;
    transition: max-height 0.3s ease-in;
}

.dropdown-toggle {
    cursor: pointer;
    user-select: none;
}

.chevron {
    transition: transform 0.2s ease;
}
.chevron.rotated {
    transform: rotate(90deg);
}

.current-page {
    @apply bg-accent-base/10 text-accent-base font-medium;
}

@media (min-width: 1750px) {
    .sidepanel-collapsed {
        display: none;
    }
    .sidepanel-expanded {
        opacity: 1 !important;
        transform: translateX(0) !important;
        display: block;
        pointer-events: auto;
    }
    #close-panel {
        display: none;
    }
}
</style>

<div>
    <div class="sidepanel-collapsed" id="sidepanel-collapsed">
         <svg 
            class="w-4 md:w-6 h-6 transform transition-transform duration-200 shrink-0"
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
        >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
    </div>
    <aside class="sidepanel-expanded" id="sidepanel-expanded">
        <!-- <div class="absolute w-full h-[100dvh] bg-gradient-to-b from-purple-300 to-indigo-300 opacity-30 dark:opacity-0 -z-10"></div> -->
        <div class="flex h-[100dvh] flex-col px-6 pt-4 md:pt-8 w-full md:w-80 md:min-w-80 md:max-w-80 border-r border-special-light">
            <div class="flex">
                <div class="title text-2xl font-semibold text-accent-base">
                    Courses
                </div>
            </div>
            <button
                id="close-panel"
                class="absolute top-4 right-4 md:top-8 md:right-8 h-8 w-8 flex items-center justify-center rounded-lg bg-accent-base/5 text-accent-base hover:bg-accent-base/10"
                aria-label="Close Series Panel"
            >
                <Icon class="h-6 w-6" name="hugeicons:cancel-01" />
            </button>
            
            <div class="space-y-4">
                {semesters.map((semester) => {
                    const semesterCourses = courses.filter((course) => (course.data.semester ?? "winter") === semester);
                    if (semesterCourses.length === 0) return null;
                    
                    return (
                        <div>
                            <h4 class="text-accent-base text-xl mt-6 font-semibold">{semester} semester:</h4>
                            <div class="mt-4 mb-4 space-y-2">
                                {semesterCourses.map((course) => {
                                    const courseExpanded = hasCurrentChild(course);
                                    const coursePath = `${rootPath}${processCourseId(course.id)}`;
                                    
                                    return (
                                        <div class={`border-l-4 pl-2 ${isCurrentPath(coursePath) ? 'border-orange-400' : 'border-gray-100'}`}>
                                            <!-- Course Level -->
                                            <div class="flex items-center justify-between">
                                                <a 
                                                    href={coursePath}
                                                    class={`text-sm font-medium hover:text-accent-base flex-1 ${isCurrentPath(coursePath) ? 'current-page' : ''}`}
                                                    // class="text-sm font-medium hover:text-accent-base flex-1"
                                                >
                                                    {course.data.courseName}
                                                </a>
                                                <button 
                                                    class="dropdown-toggle p-1 hover:bg-accent-base/10 rounded"
                                                    data-target={`course-${course.id}`}
                                                >
                                                    <svg class={`w-4 h-4 chevron ${courseExpanded ? 'rotated' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                                    </svg>
                                                </button>
                                            </div>
                                            
                                            <!-- Course Content -->
                                            <div class={`dropdown-content ml-0 mb-3 ${courseExpanded ? 'expanded' : ''}`} id={`course-${course.id}`}>
                                                {course.data.content.map((section) => {
                                                    const sectionHasCurrent = section.sectionContent.some((subsection: any) =>
                                                        subsection.subsectionContent.some((video: any) =>
                                                            isCurrentPath(`${rootPath}${processCourseId(course.id)}/${slugify(video.title)}`)
                                                        )
                                                    );
                                                    
                                                    return (
                                                        <div class="mt-2 mb-2 border-l-2 border-gray-100 pl-2">
                                                            <!-- Section Level -->
                                                            <div class="flex items-center justify-between">
                                                                <a 
                                                                    href={`${rootPath}${processCourseId(course.id)}/#section:${slugify(section.sectionTitle)}`}
                                                                    class="text-xs font-medium hover:text-accent-base text-gray-600 dark:text-gray-400 flex-1"
                                                                >
                                                                    {section.sectionTitle}
                                                                </a>
                                                                <button 
                                                                    class="dropdown-toggle p-1 hover:bg-accent-base/10 rounded"
                                                                    data-target={`section-${course.id}-${slugify(section.sectionTitle)}`}
                                                                >
                                                                    <svg class={`w-3 h-3 chevron ${sectionHasCurrent ? 'rotated' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                                                    </svg>
                                                                </button>
                                                            </div>
                                                            
                                                            <!-- Section Content -->
                                                            <div class={`dropdown-content ml-1 ${sectionHasCurrent ? 'expanded' : ''}`} id={`section-${course.id}-${slugify(section.sectionTitle)}`}>
                                                                {section.sectionContent.map((subsection) => {
                                                                    const subsectionHasCurrent = subsection.subsectionContent.some((video: any) =>
                                                                        isCurrentPath(`${rootPath}${processCourseId(course.id)}/${slugify(video.title)}`)
                                                                    );
                                                                    
                                                                    return (
                                                                        <div class="mt-1 mb-1 ml-1">
                                                                            <!-- Subsection Level -->
                                                                            <div class="flex items-center justify-between">
                                                                                <a 
                                                                                    href={`${rootPath}${processCourseId(course.id)}/#section:${slugify(section.sectionTitle)}#subsection:${slugify(subsection.subsectionTitle)}`} 
                                                                                    class="text-xs hover:text-accent-base text-gray-500 dark:text-gray-500 flex-1"
                                                                                >
                                                                                        {subsection.subsectionTitle}
                                                                                </a>
                                                                                <button 
                                                                                    class="dropdown-toggle p-1 hover:bg-accent-base/10 rounded"
                                                                                    data-target={`subsection-${course.id}-${slugify(subsection.subsectionTitle)}`}
                                                                                >
                                                                                    <svg class={`w-3 h-3 chevron ${subsectionHasCurrent ? 'rotated' : ''}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                                                                    </svg>
                                                                                </button>
                                                                            </div>
                                                                            
                                                                            <!-- Videos List -->
                                                                            <div class={`dropdown-content ml-2 ${subsectionHasCurrent ? 'expanded' : ''}`} id={`subsection-${course.id}-${slugify(subsection.subsectionTitle)}`}>
                                                                                <ol class="space-y-1 mt-1 pl-6 text-xs list-decimal">
                                                                                    {subsection.subsectionContent.map((video) => {
                                                                                        const videoPath = `${rootPath}${processCourseId(course.id)}/${slugify(video.title)}`;
                                                                                        return (
                                                                                            <li>
                                                                                                <a 
                                                                                                    href={videoPath}
                                                                                                    class={`text-xs block py-1 px-1 rounded hover:bg-accent-base/10 ${isCurrentPath(videoPath) ? 'current-page' : ''}`}
                                                                                                >
                                                                                                    {video.title}
                                                                                                </a>
                                                                                            </li>
                                                                                        );
                                                                                    })}
                                                                                </ol>
                                                                            </div>
                                                                        </div>
                                                                    );
                                                                })}
                                                            </div>
                                                        </div>
                                                    );
                                                })}
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        </div>
                    );
                })}
            </div>
        </div>
    </aside>
</div>

<script type="module">
    function initSidepanel() {
        const collapsed = document.getElementById('sidepanel-collapsed');
        const expanded = document.getElementById('sidepanel-expanded');
        const closeButton = document.getElementById('close-panel');
        let overPanel = false;

        // Check if elements exist before adding event listeners
        if (!collapsed || !expanded) return;

        // Remove existing listeners by cloning elements (prevents duplicates)
        const newCollapsed = collapsed.cloneNode(true);
        const newExpanded = expanded.cloneNode(true);
        collapsed.parentNode.replaceChild(newCollapsed, collapsed);
        expanded.parentNode.replaceChild(newExpanded, expanded);

        // Re-select the new elements
        const freshCollapsed = document.getElementById('sidepanel-collapsed');
        const freshExpanded = document.getElementById('sidepanel-expanded');
        const freshCloseButton = document.getElementById('close-panel');

        if (!freshCollapsed || !freshExpanded || !freshCloseButton) return;

        // Sidepanel hover functionality
        freshCollapsed.addEventListener('mouseenter', () => {
            freshExpanded.classList.add('visible');
        });
        freshCollapsed.addEventListener('mouseleave', () => {
            setTimeout(() => {
                if (!overPanel) freshExpanded.classList.remove('visible');
            }, 10);
        });
        freshExpanded.addEventListener('mouseenter', () => {
            overPanel = true;
            freshExpanded.classList.add('visible');
        });
        freshExpanded.addEventListener('mouseleave', () => {
            overPanel = false;
            freshExpanded.classList.remove('visible');
        });
        
        // Add close button functionality
        freshCloseButton.addEventListener('click', () => {
            overPanel = false;
            freshExpanded.classList.remove('visible');
        });

        // Dropdown toggle functionality
        const dropdownToggles = freshExpanded.querySelectorAll('.dropdown-toggle');
        dropdownToggles.forEach(toggle => {
            toggle.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                const targetId = toggle.getAttribute('data-target');
                const targetContent = document.getElementById(targetId);
                const chevron = toggle.querySelector('.chevron');
                
                if (targetContent && chevron) {
                    const isExpanded = targetContent.classList.contains('expanded');
                    
                    if (isExpanded) {
                        targetContent.classList.remove('expanded');
                        chevron.classList.remove('rotated');
                    } else {
                        targetContent.classList.add('expanded');
                        chevron.classList.add('rotated');
                    }
                }
            });
        });
    }

    // Initialize on page load
    document.addEventListener("DOMContentLoaded", initSidepanel);

    // Re-initialize after Astro navigation
    document.addEventListener("astro:after-swap", initSidepanel);

    // Fallback for other routing systems
    document.addEventListener("astro:page-load", initSidepanel);
</script>