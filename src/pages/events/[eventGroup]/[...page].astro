---
import { getCollection } from "astro:content";
import BaseLayout from "@/layouts/Base.astro";
import type { CollectionEntry } from "astro:content";
import type { GetStaticPaths, Page } from "astro";
import { slugify } from "@/utils/strings.ts";
import { Icon } from "astro-icon/components";
import Badge from "@/components/Badge.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import { capitalize } from "@/utils/strings.ts";

export const getStaticPaths = (async ({ paginate }) => {
    const MAX_POSTS_PER_PAGE = 10;
    
    // Get all events
    const allEvents = await getCollection('events');
    
    // Group events by eventGroup
    const eventsByGroup = allEvents.reduce((groups, event) => {
        const group = event.data.group || 'uncategorized';
        if (!groups[group]) {
            groups[group] = [];
        }
        groups[group].push(event);
        return groups;
    }, {} as Record<string, CollectionEntry<"events">[]>);
    
    // Create paginated paths for each group
    const paths = [];
    
    for (const [eventGroup, events] of Object.entries(eventsByGroup)) {
        // Sort events by date (using first date in array)
        const sortedEvents = events.sort((a, b) => {
            const dateA = Array.isArray(a.data.date) ? a.data.date[0] : a.data.date;
            const dateB = Array.isArray(b.data.date) ? b.data.date[0] : b.data.date;
            return new Date(dateB).getTime() - new Date(dateA).getTime(); // Newest first
        });
        
        // Create paginated paths for this group
        const groupPaths = paginate(sortedEvents, {
            params: { eventGroup: slugify(eventGroup) },
            pageSize: MAX_POSTS_PER_PAGE,
            props: { 
                eventGroup,
                allGroups: Object.keys(eventsByGroup)
            },
        });
        
        paths.push(...groupPaths);
    }
    
    return paths;
}) satisfies GetStaticPaths;

interface Props {
    page: Page<CollectionEntry<"events">>;
    eventGroup: string;
    allGroups: string[];
}

const { page, eventGroup, allGroups } = Astro.props;

const meta = {
    description: `Events in ${eventGroup}`,
    title: `${eventGroup} Events`,
};

const paginationProps = {
    ...(page.url.prev && {
        prevUrl: {
            text: "← Previous Page",
            url: page.url.prev,
        },
    }),
    ...(page.url.next && {
        nextUrl: {
            text: "Next Page →",
            url: page.url.next,
        },
    }),
};

// Helper function to format date display
function formatEventDate(date: Date | Date[]) {
    const dates = Array.isArray(date) ? date : [date];
    if (dates.length === 1) {
        return new Intl.DateTimeFormat('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        }).format(new Date(dates[0]));
    } else {
        const start = new Intl.DateTimeFormat('en-US', { 
            month: 'short', 
            day: 'numeric' 
        }).format(new Date(dates[0]));
        const end = new Intl.DateTimeFormat('en-US', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
        }).format(new Date(dates[1]));
        return `${start} - ${end}`;
    }
}
---

<BaseLayout meta={meta}>
    <div class="mb-4 mt-4">
        <!-- Group Navigation -->
        <div class="flex flex-wrap gap-2 mb-6 -ml-1">
            {allGroups.map((group) => (
                <a 
                    href={`/events/${slugify(group)}`}
                    class={`px-3 py-1 rounded-full text-sm transition-colors ${
                        group === eventGroup 
                            ? 'bg-accent-base text-white' 
                            : 'bg-gray-200 hover:bg-gray-300 text-gray-700'
                    }`}
                >
                    {group}
                </a>
            ))}
        </div>
        <h1 class="title">
            {capitalize(eventGroup)} Events
        </h1>
    </div>

    <!-- Events List -->
    <div class="space-y-6">
        {page.data.map((event) => (
            <a 
                href={`/events/${slugify(eventGroup)}/${slugify(event.data.name)}`}
                class="hover:text-accent-base transition-colors"
            >
                <article class="shadow-lg rounded-lg p-5 hover:brightness-120 transition-shadow bg-gray-75">
                    <div class="flex justify-center flex-col items-start mb-3">
                        <h2 class="text-xl font-semibold text-accent-base">
                            {event.data.name}
                        </h2>
                    
                        <div class="flex flex-wrap items-center text-lighter text-sm mt-1 mx-2">
                            <span class="flex items-center h-[1.75rem]">
                                <Icon aria-hidden="true" class="flex items-center h-4 w-4 me-1" focusable="false" name="hugeicons:calendar-03" />
                                <FormattedDate date={event.data.date}/>
                            </span>
                        </div>
                    </div>
                    
                    <div class="mt-0 flex flex-wrap items-center gap-2 mx-1">
                        {event.data.tags?.length ? (
                            
                            <Icon aria-hidden="true" class="flex-shrink-0 inline-block h-6 w-6 text-accent-base" focusable="false" name="solar:tag-line-duotone" />	
                            <>
                                {event.data.tags.map((tag) => (
                                    <a aria-label={`View all posts with the tag: ${tag}`} href={`/tags/${tag}`}>
                                        <Badge variant="accent-two" title={tag} />
                                    </a>
                                ))}
                            </>
                        ) : (
                            <Icon aria-hidden="true" class="flex-shrink-0 inline-block h-6 w-6 text-lightest" focusable="false" name="solar:tag-line-duotone" />
                            <span class="text-sm text-lightest">No tags</span>
                        )
                        }
                    </div>

                    {event.data.description && (
                        <p class="text-gray-700 mb-3">
                            {event.data.description}
                        </p>
                    )}
                </article>
            </a>
        ))}
    </div>

    <!-- Pagination -->
    {(page.url.prev || page.url.next) && (
        <nav class="flex justify-between items-center mt-8 pt-8 border-t">
            {page.url.prev ? (
                <a 
                    href={page.url.prev}
                    class="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded transition-colors"
                >
                    ← Previous Page
                </a>
            ) : (
                <div></div>
            )}
            
            <span class="text-gray-600 text-sm">
                Page {page.currentPage} of {page.lastPage}
            </span>
            
            {page.url.next ? (
                <a 
                    href={page.url.next}
                    class="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded transition-colors"
                >
                    Next Page →
                </a>
            ) : (
                <div></div>
            )}
        </nav>
    )}
</BaseLayout>